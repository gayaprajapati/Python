# Independent_city_booked_tracker

import pandas as pd
import os
import requests
import time
import numpy as np
from pprint import pprint
import json
import xlwings  as xw
import datetime as dt
import io
from datetime import timedelta
from datetime import datetime
from xlwings import constants
from PIL import ImageGrab #ImageGrab
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.image import MIMEImage
from email.mime.base import MIMEBase
from email import encoders
import mimetypes
import os.path
import openpyxl
import datetime 


def poll_job(s, redash_url, job):
    # TODO: add timeout
    while job['status'] not in (3,4):
        response = s.get('{}/api/jobs/{}'.format(redash_url, job['id']))
        job = response.json()['job']
        time.sleep(1)
 
    if job['status'] == 3:
        return job['query_result_id']
    
    return None


#For GI
def get_fresh_query_result(redash_url, query_id, api_key):
    s = requests.Session()
    s.headers.update({'Authorization': 'Key {}'.format(api_key)})
 
    response = s.post('{}/api/queries/{}/refresh'.format(redash_url, query_id))
 
    if response.status_code != 200:
        raise Exception('Refresh failed.')
 
    result_id = poll_job(s, redash_url, response.json()['job'])
 
    if result_id:
        response = s.get('{}/api/queries/{}/results/{}.json'.format(redash_url, query_id, result_id))
        if response.status_code != 200:
            raise Exception('Failed getting results.')
    else:
        raise Exception('Query execution failed.')
 
    return response.json()['query_result']['data']['rows']
 

    # Need to use a *user API key* here (and not a query API key).

api_key = 'jgrtrDepU6ry9rchdqnrpyc0C2oJ1C6ldfLmOFZQ'
    
GIRaw = pd.DataFrame(get_fresh_query_result('https://redash.goibibo.com/', 39228, api_key),columns = ['voyagerhotelid','bookingdate','bkg','rns','gmv','gr','sp','convfee'])
GIRaw_hotels = pd.DataFrame(get_fresh_query_result('https://redash.goibibo.com/', 43183, api_key),columns = ['hotelcode','voyagerhotelid','Products','city','state'])
GIRaw_visits = pd.DataFrame(get_fresh_query_result('https://redash.goibibo.com/', 42153, api_key),columns = ['voyagerhotelid','dates','hits','txn'])

#For MMT
# Need to use a *user API key* here (and not a query API key).

api_key1 = 'esBMUvhZshiJVEhTRxYGBWYO7pGSYrGoMlgmagg9'
    
MMTRaw = pd.DataFrame(get_fresh_query_result('http://hotels-redash.mmt.com/', 2971, api_key1),columns = ['Products','Booking_date','Bkg','RNs','GMV','GRAmt','SP_amt','markupsamt'])
Locus_city = pd.DataFrame(get_fresh_query_result('http://hotels-redash.mmt.com/', 3280, api_key1),columns = ['Products','Locus_city'])

city_state = pd.read_excel('C:\Offic data\HTL\Chain\City_Booked_tracker\city_state.xlsx', sheet_name='Sheet1')

Locus_city['Products'] = Locus_city['Products'].astype('str')

GIRaw['voyagerhotelid'] = GIRaw['voyagerhotelid'].astype('str')
GIRaw_visits['voyagerhotelid'] = GIRaw_visits['voyagerhotelid'].astype('str')
GIRaw_hotels['voyagerhotelid'] = GIRaw_hotels['voyagerhotelid'].astype('str')
GIRaw_hotels['Products'] = GIRaw_hotels['Products'].astype('str')
MMTRaw['Products'] = MMTRaw['Products'].astype('str')

GIRaw_hotels=pd.merge(GIRaw_hotels,Locus_city,on='Products',how='left')
# GIRaw_hotels['Locus_city'] = GIRaw_hotels.Locus_city.fillna('ANOMALY')


FinalGI=pd.merge(GIRaw,GIRaw_hotels,on='voyagerhotelid',how='left')
FinalMMT=pd.merge(MMTRaw,GIRaw_hotels,on='Products',how='left')
FinalGI_visits=pd.merge(GIRaw_visits,GIRaw_hotels,on='voyagerhotelid',how='left')

FinalGI1=pd.merge(FinalGI,city_state,on='Locus_city',how='left')
FinalMMT1=pd.merge(FinalMMT,city_state,on='Locus_city',how='left')
FinalGI_visits=pd.merge(FinalGI_visits,city_state,on='Locus_city',how='left')

FinalGI1['city_tier'] = FinalGI1.city_tier.fillna('Tier 3')
FinalGI1['city_type'] = FinalGI1.city_type.fillna('Business')
FinalGI1['Cluster'] = FinalGI1.Cluster.fillna('F')

FinalMMT1['city_tier'] = FinalMMT1.city_tier.fillna('Tier 3')
FinalMMT1['city_type'] = FinalMMT1.city_type.fillna('Business')
FinalMMT1['Cluster'] = FinalMMT1.Cluster.fillna('F')

FinalGI_visits['city_tier'] = FinalGI_visits.city_tier.fillna('Tier 3')
FinalGI_visits['city_type'] = FinalGI_visits.city_type.fillna('Business')
FinalGI_visits['Cluster'] = FinalGI_visits.Cluster.fillna('F')


MMTAggr = {'RNs':'sum','GMV':'sum','GRAmt':'sum','SP_amt':'sum','markupsamt':'sum'}
GIAggr = {'rns':'sum','gmv':'sum','gr':'sum','sp':'sum','convfee':'sum'}
GIAggr_visits = {'hits':'sum'}

OverallMMT = FinalMMT1.groupby(['Booking_date','Locus_city','state','city_tier','city_type','Cluster'],as_index=False).agg(MMTAggr)
OverallGI = FinalGI1.groupby(['bookingdate','Locus_city','state','city_tier','city_type','Cluster'],as_index=False).agg(GIAggr)
Overall_Visits_GI = FinalGI_visits.groupby(['dates','Locus_city','state','city_tier','city_type','Cluster'],as_index=False).agg(GIAggr_visits)

OverallMMT.insert(11, 'Brand', 'MMT')
OverallGI.insert(11, 'Brand', 'GI')


wb = xw.Book(r'C:\Offic data\HTL\Chain\Ind_City_Booked_Tracker\Ind_City_Dashboard.xlsb')
mysheet1 = wb.sheets('Bookings')
m=mysheet1.range('R1').value
mysheet1.range('D'+str(int(m))).value=OverallMMT.values
g=mysheet1.range('R1').value
mysheet1.range('D'+str(int(g))).value=OverallGI.values
wb.save()



#MMT Visits

import pandas as pd
import os
import requests
import time
import numpy as np
from pprint import pprint
import json
import xlwings  as xw
import datetime as dt
import io
from datetime import timedelta
from datetime import datetime
from xlwings import constants
from PIL import ImageGrab
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.image import MIMEImage
from email.mime.base import MIMEBase
from email import encoders
import mimetypes
import os.path
import openpyxl

app = xw.App()
import win32com.client
import zipfile
import datetime 



# MMT Visits

outlook = win32com.client.Dispatch("Outlook.Application")
mapi = outlook.GetNamespace("MAPI")
your_folder = mapi.GetDefaultFolder(6).Folders.Item("Omniture")
# print(your_folder)
msgs=your_folder.Items
# msg=msgs.GetLast()
# print(msg.subject)
# print (msg.subject)
# make subject dynamic as per date
# subject='SEM Automated Daily Dashboard | ' + predate
subject = 'Data Warehouse: for Makemytrip Mobile App'
attachmentname='App_Report.zip'
# create new filename as per date
MyFileName=r'C:\Users\mmt7982\Desktop\MMT_Crawled\Visits\App_Report.zip' 
d1 = dt.datetime.date(dt.datetime.today() - dt.timedelta(days = 0))

for msg in msgs:
    if dt.datetime.date(msg.ReceivedTime) == d1:
        for att in msg.Attachments:
            if att.FileName == attachmentname:
                att.SaveAsFile(MyFileName)
                
# def get_product_id(x):
#     return(x[6:])

subject1 = 'Data Warehouse: for MMT Global'
attachmentname1='Web_Report.zip'
# create new filename as per date
MyFileName1=r'C:\Users\mmt7982\Desktop\MMT_Crawled\Visits\Web_Report.zip' 
d1 = dt.datetime.date(dt.datetime.today() - dt.timedelta(days = 0))

for msg in msgs:
    if dt.datetime.date(msg.ReceivedTime) == d1:
        for att in msg.Attachments:
            if att.FileName == attachmentname1:
                att.SaveAsFile(MyFileName1)

zf = zipfile.ZipFile(r'C:\Users\mmt7982\Desktop\MMT_Crawled\Visits\App_Report.zip') 
df = pd.read_csv(zf.open('App_Report.csv'),converters = {'Products':str})

zf1 = zipfile.ZipFile(r'C:\Users\mmt7982\Desktop\MMT_Crawled\Visits\Web_Report.zip') 
df1 = pd.read_csv(zf1.open('Web_Report.csv'))
df1['Products'] = df1['Products'].astype(str)

def get_product_id(x):
    return(x[6:])

df1['Products'] = df1.apply(lambda x: get_product_id(x.Products), axis=1)
FinalVisits= pd.concat([df,df1])


MMT_Visits=pd.merge(FinalVisits,GIRaw_hotels,on=['Products'],how='left')

MMT_Visits1=pd.merge(MMT_Visits,city_state,on='Locus_city',how='left')

MMT_Visits1['city_tier'] = MMT_Visits1.city_tier.fillna('Tier 3')
MMT_Visits1['city_type'] = MMT_Visits1.city_type.fillna('Business')
MMT_Visits1['Cluster'] = MMT_Visits1.Cluster.fillna('F')

filter = MMT_Visits1["Products"] != ""
MMT_Visits1 = MMT_Visits1[filter]



yesterday_date=datetime.date.today()-timedelta(days=1)
yesterday_date=yesterday_date.strftime("%Y-%m-%d")

MMT_Visits1.insert(5, "dates",yesterday_date)

MMT_Aggr={'Visits':'sum'}

Final_MMT_Visits = MMT_Visits1.groupby(['dates','Locus_city','state','city_tier','city_type','Cluster'],as_index=False).agg(MMT_Aggr)

Final_MMT_Visits.insert(7, 'Brand', 'MMT')
Overall_Visits_GI.insert(7, 'Brand', 'GI')

mysheet2 = wb.sheets('Visits')
n=mysheet2.range('O1').value
mysheet2.range('D'+str(int(n))).value=Overall_Visits_GI.values
o=mysheet2.range('O1').value
mysheet2.range('D'+str(int(o))).value=Final_MMT_Visits.values
wb.save()
wb.api.RefreshAll()
wb.save()


wb1 = xw.Book(r'C:\Offic data\HTL\Chain\Ind_City_Booked_Tracker\Ind_City_Dashboard_Snapshot.xlsb')

output_values = wb.sheets['City_View'].range('A3:AL1550').options(ndim=2).value
wb1.sheets['City_View'].range('A3:AL1500').value = output_values

output_values1 = wb.sheets['State_View'].range('A3:AL50').options(ndim=2).value
wb1.sheets['State_View'].range('A3:AL50').value = output_values1

output_values2 = wb.sheets['Tiers'].range('B3:AL08').options(ndim=2).value
wb1.sheets['Tiers'].range('B3:AL08').value = output_values2

output_values3 = wb.sheets['Tiers'].range('B11:AL14').options(ndim=2).value
wb1.sheets['Tiers'].range('B11:AL14').value = output_values3

output_values4 = wb.sheets['Tiers'].range('B17:AL24').options(ndim=2).value
wb1.sheets['Tiers'].range('B17:AL24').value = output_values4

wb1.save()
wb1.close()




# In[3]:


#Saving images
import pandas as pd
import os
import requests
import time
import numpy as np
from pprint import pprint
import json
import xlwings  as xw
import datetime as dt
import io
from datetime import timedelta
from datetime import datetime
from xlwings import constants
from PIL import ImageGrab #ImageGrab
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.image import MIMEImage
from email.mime.base import MIMEBase
from email import encoders
import mimetypes
import os.path
import openpyxl
path='C://Offic data//HTL//Chain//Ind_City_Booked_Tracker'
if not os.path.exists(path):
    os.makedirs(path)


### Snapshot

wb = xw.Book(r'C:\Offic data\HTL\Chain\Ind_City_Booked_Tracker\Ind_City_Dashboard.xlsb')
mysheet1 = wb.sheets('Tiers')
mysheet2 = wb.sheets('City_View')
mysheet3 = wb.sheets('State_View')


thisrange = mysheet1.range("B1:AL7")
pic = thisrange.api.CopyPicture(constants.PictureAppearance.xlScreen,constants.CopyPictureFormat.xlBitmap)
img = ImageGrab.grabclipboard()
img.save(path +'/Tier.png')

thisrange = mysheet1.range("B9:AL13")
pic = thisrange.api.CopyPicture(constants.PictureAppearance.xlScreen,constants.CopyPictureFormat.xlBitmap)
img = ImageGrab.grabclipboard()
img.save(path +'/city_type.png')

thisrange = mysheet2.range("A1:AL33")
pic = thisrange.api.CopyPicture(constants.PictureAppearance.xlScreen,constants.CopyPictureFormat.xlBitmap)
img = ImageGrab.grabclipboard()
img.save(path +'/city_view.png')


thisrange = mysheet3.range("A1:AK38")
pic = thisrange.api.CopyPicture(constants.PictureAppearance.xlScreen,constants.CopyPictureFormat.xlBitmap)
img = ImageGrab.grabclipboard()
img.save(path +'/state_view.png')


thisrange = mysheet1.range("B15:AL23")
pic = thisrange.api.CopyPicture(constants.PictureAppearance.xlScreen,constants.CopyPictureFormat.xlBitmap)
img = ImageGrab.grabclipboard()
img.save(path +'/Cluster_view.png')

wb.close()
# Mail Configration

import pandas as pd
import pyodbc
import os
from datetime import timedelta
from dateutil.relativedelta import relativedelta
import datetime
import xlwings  as xw
from xlwings import constants
from PIL import ImageGrab #ImageGrab
import time
import smtplib
import pyodbc
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.image import MIMEImage
from email.mime.base import MIMEBase
from email import encoders
import mimetypes

save_path =r'C:\Offic data\HTL\Chain\Ind_City_Booked_Tracker\Ind_City_Dashboard_Snapshot.xlsb'


def send_email_1(subject,body,to_email_list,filename):
    to_emails= to_email_list
    to_CC=to_CC_list
    message = body
    s = smtplib.SMTP(host='smtp.outlook.office365.com', port=587)
    s.starttls()
    s.login('MMT7982@go-mmt.com','gommt@21')
    msg = MIMEMultipart() 
    msg['From']='Gaya.Prajapati@go-mmt.com'
    msg['To']=to_emails
    msg['CC']=to_CC
    msg['Subject']=subject
    msg.attach(MIMEText(message, 'HTML'))
    
    ctype, encoding = mimetypes.guess_type(filename)
    if ctype is None or encoding is not None:
        ctype = "application/octet-stream"
    maintype, subtype = ctype.split("/", 1)
    
    fp = open(filename, "rb")
    attachment = MIMEBase(maintype, subtype)
    attachment.set_payload(fp.read())
    fp.close()
    encoders.encode_base64(attachment)
    attachment.add_header("Content-Disposition", "attachment", filename=os.path.basename(filename))
    msg.attach(attachment)
    
    def images(image_name):
        fp = open(path +'\\' + image_name +'.png', 'rb')
        msgImage1 = MIMEImage(fp.read())
        fp.close()
        msgImage1.add_header('Content-ID', '<' + image_name +'>')
        msg.attach(msgImage1)
    
    images('Tier')
    images('city_type')
    images('city_view')
    images('state_view')   
    images('Cluster_view')

    s.send_message(msg)
    del msg
    s.quit()
    
print('Preparing Mail body')
text0 = "<div style = 'color:blue'> This is an automated email </div> <br/>"
text = "Hi All,  <br/> <br/> Please find the attached file of Independent hotels city dashbaord & below summary of Production & conv% view:-<br/><br/>" # '+ yesterday_date +'


Image = '<img src="cid:Tier"></img><br/><br/>'
Image1 = '<img src="cid:city_type"></img><br/><br/>'
Image2 = '<img src="cid:city_view"></img><br/><br/>'
Image3 = '<img src="cid:state_view"></img><br/><br/>'
Image4 = '<img src="cid:Cluster_view"></img><br/><br/>'


Regards = "<p>Best & Regards,<br/>Gaya Prasad</p>"
    
subject='Independent Hotels- City Level RNs and Visits Tracker' #+ yesterday_date

body = text0 + text  + Image4 +  Image + Image1 + Image2 + Image3 + Regards

#rec_To_list = ['Gaya.Prajapati@go-mmt.com']
#rec_To_list = ['Piyush.Gupta@go-mmt.com']
rec_To_list=['Vijay.Vittal@go-mmt.com','Piyush.Gupta@go-mmt.com','Manish.Mudgal@go-mmt.com','Vikram.Challur@go-mmt.com','Vikram.Kanchi@go-mmt.com','Vikas.Sharma@go-mmt.com','harjit.kumar@go-mmt.com','Rahul.Jain3@go-mmt.com','Rajan.Kashyap@go-mmt.com','Rohini.Tuli@go-mmt.com']

to_email_list=', '.join(rec_To_list)
rec_CC_list=['gaya.prajapati@go-mmt.com']
to_CC_list=', '.join(rec_CC_list)
        
print('Sending Mail-1')    
send_email_1(subject,body,to_email_list,save_path)


